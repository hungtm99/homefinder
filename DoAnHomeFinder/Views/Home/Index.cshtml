@{
    ViewBag.Title = "Home Page";
}

<div class="row">
    <br />
    <br />
    <br />
    <div class="text-center">
        <h1 id="text">HomeFinder - Ứng dụng tìm nhà trọ trực tuyến</h1>
        <div class="snowflakes" aria-hidden="true">
            <div class="snowflake">❅</div>
            <div class="snowflake">❆</div>
            <div class="snowflake">❅</div>
            <div class="snowflake">❆</div>
            <div class="snowflake">❅</div>
            <div class="snowflake">❆</div>
            <div class="snowflake">❅</div>
            <div class="snowflake">❆</div>
            <div class="snowflake">❅</div>
            <div class="snowflake">❆</div>
            <div class="snowflake">❅</div>
            <div class="snowflake">❆</div>
        </div>
    </div>
    <style>

        @@-webkit-keyframes glowing {
          0% { color: #004A7F; -webkit-box-shadow: 0 0 3px #004A7F; }
          50% { color: #0094FF; -webkit-box-shadow: 0 0 10px #0094FF; }
          100% { color: #004A7F; -webkit-box-shadow: 0 0 3px #004A7F; }
        }

        @@-moz-keyframes glowing {
          0% { color: #004A7F; -moz-box-shadow: 0 0 3px #004A7F; }
          50% { color: #0094FF; -moz-box-shadow: 0 0 10px #0094FF; }
          100% { color: #004A7F; -moz-box-shadow: 0 0 3px #004A7F; }
        }

        @@-o-keyframes glowing {
          0% { color: #004A7F; box-shadow: 0 0 3px #004A7F; }
          50% { color: #0094FF; box-shadow: 0 0 10px #0094FF; }
          100% { color: #004A7F; box-shadow: 0 0 3px #004A7F; }
        }

        @@keyframes glowing {
          0% { color: #004A7F; box-shadow: 0 0 3px #004A7F; }
          50% { color: #0094FF; box-shadow: 0 0 10px #0094FF; }
          100% { color: #004A7F; box-shadow: 0 0 3px #004A7F; }
        }

        #text {
          -webkit-animation: glowing 1500ms infinite;
          -moz-animation: glowing 1500ms infinite;
          -o-animation: glowing 1500ms infinite;
          animation: glowing 1500ms infinite;
        }


        @@-webkit-keyframes snowflakes-shake {
            0%,100% {
                -webkit-transform: translateX(0);
                transform: translateX(0)
            }

            50% {
                -webkit-transform: translateX(80px);
                transform: translateX(80px)
            }
        }

        @@keyframes snowflakes-fall {
            0% {
                top: -10%
            }

            100% {
                top: 100%
            }
        }

        @@keyframes snowflakes-shake {
            0%,100% {
                transform: translateX(0)
            }

            50% {
                transform: translateX(80px)
            }
        }

        .snowflake {
            color: #fff;
            font-size: 1em;
            font-family: Arial, sans-serif;
            text-shadow: 0 0 5px #000;
            position: fixed;
            top: -10%;
            z-index: 9999;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            cursor: default;
            -webkit-animation-name: snowflakes-fall,snowflakes-shake;
            -webkit-animation-duration: 10s,3s;
            -webkit-animation-timing-function: linear,ease-in-out;
            -webkit-animation-iteration-count: infinite,infinite;
            -webkit-animation-play-state: running,running;
            animation-name: snowflakes-fall,snowflakes-shake;
            animation-duration: 10s,3s;
            animation-timing-function: linear,ease-in-out;
            animation-iteration-count: infinite,infinite;
            animation-play-state: running,running;
        }

            .snowflake:nth-of-type(0) {
                left: 1%;
                -webkit-animation-delay: 0s,0s;
                animation-delay: 0s,0s
            }

            .snowflake:nth-of-type(1) {
                left: 10%;
                -webkit-animation-delay: 1s,1s;
                animation-delay: 1s,1s
            }

            .snowflake:nth-of-type(2) {
                left: 20%;
                -webkit-animation-delay: 6s,.5s;
                animation-delay: 6s,.5s
            }

            .snowflake:nth-of-type(3) {
                left: 30%;
                -webkit-animation-delay: 4s,2s;
                animation-delay: 4s,2s
            }

            .snowflake:nth-of-type(4) {
                left: 40%;
                -webkit-animation-delay: 2s,2s;
                animation-delay: 2s,2s
            }

            .snowflake:nth-of-type(5) {
                left: 50%;
                -webkit-animation-delay: 8s,3s;
                animation-delay: 8s,3s
            }

            .snowflake:nth-of-type(6) {
                left: 60%;
                -webkit-animation-delay: 6s,2s;
                animation-delay: 6s,2s
            }

            .snowflake:nth-of-type(7) {
                left: 70%;
                -webkit-animation-delay: 2.5s,1s;
                animation-delay: 2.5s,1s
            }

            .snowflake:nth-of-type(8) {
                left: 80%;
                -webkit-animation-delay: 1s,0s;
                animation-delay: 1s,0s
            }

            .snowflake:nth-of-type(9) {
                left: 90%;
                -webkit-animation-delay: 3s,1.5s;
                animation-delay: 3s,1.5s
            }

            .snowflake:nth-of-type(10) {
                left: 25%;
                -webkit-animation-delay: 2s,0s;
                animation-delay: 2s,0s
            }

            .snowflake:nth-of-type(11) {
                left: 65%;
                -webkit-animation-delay: 4s,2.5s;
                animation-delay: 4s,2.5s
            }


    </style>

    @*<script type="module">
        import * as THREE from "https://cdn.skypack.dev/three@0.136.0";
        import { OrbitControls } from "https://cdn.skypack.dev/three@0.136.0/examples/jsm/controls/OrbitControls";

        var defined = 'QXV0aG9yOiBMdWMg';
        var datacenter = ['aHR0cHM6L', 'y93d3cuZmF', 'jZWJvb2suY29t'];
        let scene = new THREE.Scene();
        scene.background = new THREE.Color('#160016');
        let camera = new THREE.PerspectiveCamera(60, innerWidth / innerHeight, 1, 1000);
        camera.position.set(0, 4, 21);
        let renderer = new THREE.WebGLRenderer();
        renderer.setSize(innerWidth, innerHeight);
        document.body.appendChild(renderer.domElement);
        window.addEventListener("resize", event => {
            camera.aspect = innerWidth / innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(innerWidth, innerHeight);
        })
        datacenter.push('L3Byb2ZpbGUu');
        let controls = new OrbitControls(camera, renderer.domElement);
        controls.enableDamping = true;
        controls.enablePan = false;
        datacenter.push('cGhwP2lkPTEw');
        let gu = {
            time: { value: 0 }
        }
        defined = defined.concat('VGhpZW4gUGhvbmc=');
        let sizes = [];
        let shift = [];
        let pushShift = () => {
            shift.push(
                Math.random() * Math.PI,
                Math.random() * Math.PI * 2,
                (Math.random() * 0.9 + 0.1) * Math.PI * 0.1,
                Math.random() * 0.9 + 0.1
            );
        }
        datacenter.push('MDA0NTQwNj');
        var context = atob(defined);
        let pts = new Array(50000).fill().map(p => {
            sizes.push(Math.random() * 1.5 + 0.5);
            pushShift();
            return new THREE.Vector3().randomDirection().multiplyScalar(Math.random() * 0.5 + 9.5);
        })
        for (let i = 0; i < 100000; i++) {
            let r = 10, R = 40;
            let rand = Math.pow(Math.random(), 1.5);
            let radius = Math.sqrt(R * R * rand + (1 - rand) * r * r);
            pts.push(new THREE.Vector3().setFromCylindricalCoords(radius, Math.random() * 2 * Math.PI, (Math.random() - 0.5) * 2));
            sizes.push(Math.random() * 1.5 + 0.5);
            pushShift();
        }
        console.log(context);
        datacenter.push('I2MTQ5MQ' + '==');
        let g = new THREE.BufferGeometry().setFromPoints(pts);
        g.setAttribute("sizes", new THREE.Float32BufferAttribute(sizes, 1));
        g.setAttribute("shift", new THREE.Float32BufferAttribute(shift, 4));
        let m = new THREE.PointsMaterial({
            size: 0.125,
            transparent: true,
            depthTest: false,
            blending: THREE.AdditiveBlending,
            onBeforeCompile: shader => {
                shader.uniforms.time = gu.time;
                shader.vertexShader = `
                        uniform float time;
                        attribute float sizes;
                        attribute vec4 shift;
                        varying vec3 vColor;
                        ${shader.vertexShader}
                    `.replace(
                    `gl_PointSize = size;`,
                    `gl_PointSize = size * sizes;`
                ).replace(
                    `#include <color_vertex>`,
                    `#include <color_vertex>
                        float d = length(abs(position) / vec3(40., 10., 40));
                        d = clamp(d, 0., 1.);
                        vColor = mix(vec3(42,40,154), vec3(209,124,196), d) / 255.;
                    `).replace(
                        `#include <begin_vertex>`,
                        `#include <begin_vertex>
                        float t = time;
                        float moveT = mod(shift.x + shift.z * t, PI2);
                        float moveS = mod(shift.y + shift.z * t, PI2);
                        transformed += vec3(cos(moveS) * sin(moveT), cos(moveT), sin(moveS) * sin(moveT)) * shift.a;
                    `);
                // console.log(shader.vertexShader);
                shader.fragmentShader = `
                    varying vec3 vColor;
                    ${shader.fragmentShader}
                    `.replace(
                    `#include <clipping_planes_fragment>`,
                    `#include <clipping_planes_fragment>
                        float d = length(gl_PointCoord.xy - 0.5);
                        if (d > 0.5) discard;
                    `).replace(
                        `vec4 diffuseColor = vec4( diffuse, opacity );`,
                        `vec4 diffuseColor = vec4( vColor, smoothstep(0.5, 0.1, d) );`
                    );
                // console.log(shader.fragmentShader);
            }
        });
        let p = new THREE.Points(g, m);
        p.rotation.order = "ZYX";
        p.rotation.z = 0.2;
        scene.add(p)
        const data = atob(datacenter.join(''));
        let clock = new THREE.Clock();
        console.log(data);
        renderer.setAnimationLoop(() => {
            controls.update();
            let t = clock.getElapsedTime() * 0.5;
            gu.time.value = t * Math.PI;
            p.rotation.y = t * 0.05;
            renderer.render(scene, camera);
        });
    </script>*@
</div>